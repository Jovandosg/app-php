name: Pipeline CI/CD

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build_ecr:
    name: build_ecr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::975050217683:role/GitHubActionRepoApp
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag and Push
        run: |
          docker build -t devops:v1.0.0 .
          docker tag devops:v1.0.0 975050217683.dkr.ecr.us-east-1.amazonaws.com/devops:v1.0.0
          docker tag devops:v1.0.0 975050217683.dkr.ecr.us-east-1.amazonaws.com/devops:latest
          docker push 975050217683.dkr.ecr.us-east-1.amazonaws.com/devops:v1.0.0
          docker push 975050217683.dkr.ecr.us-east-1.amazonaws.com/devops:latest

  deploy_ec2:
    name: deploy_ec2
    needs: build_ecr
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::975050217683:role/GitHubActionRepoApp
          aws-region: us-east-1

      - name: Create SSH key file
        run: |
          echo "${{ secrets.INSTANCE_KEY }}" > bia.pem
          chmod 600 bia.pem

      - name: Show deployment info
        run: |
          echo "Public IP: ${{ secrets.PUBLIC_IP }}"
          echo "Key configured: $(test -f bia.pem && echo 'YES' || echo 'NO')"

      - name: Test SSH connection
        run: |
          ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i bia.pem ec2-user@${{ secrets.PUBLIC_IP }} echo 'SSH connection successful'

      - name: Run Troubleshooting on EC2
        run: |
          ssh -i bia.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.PUBLIC_IP }} << 'EOF'
            echo "üîé Iniciando troubleshooting pr√©-deploy..."
            
            # 1. Verificar Docker
            echo -e "\n--- [1] Docker Status ---"
            if command -v docker &> /dev/null; then
              echo "‚úî Docker instalado"
            else
              echo "‚ùå Docker n√£o encontrado"
              exit 1
            fi
            
            if sudo systemctl is-active --quiet docker; then
              echo "‚úî Docker service ativo"
            else
              echo "‚ùå Docker service N√ÉO est√° rodando"
              exit 1
            fi
            
            # 2. Verificar IAM Role
            echo -e "\n--- [2] IAM Identity ---"
            aws sts get-caller-identity || {
              echo "‚ùå Falha ao obter identidade AWS"
              exit 1
            }
            
            # 3. Testar login no ECR
            echo -e "\n--- [3] Login no Amazon ECR ---"
            if aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 975050217683.dkr.ecr.us-east-1.amazonaws.com 2>&1 | grep -q "Login Succeeded"; then
              echo "‚úî Login no ECR OK"
            else
              echo "‚ùå Falha no login no ECR"
              exit 1
            fi
            
            # 4. Verificar conectividade com ECR
            echo -e "\n--- [4] Conectividade ECR ---"
            if aws ecr describe-repositories --repository-names devops --region us-east-1 &> /dev/null; then
              echo "‚úî Reposit√≥rio 'devops' acess√≠vel"
            else
              echo "‚ùå Reposit√≥rio 'devops' n√£o encontrado ou sem permiss√£o"
              exit 1
            fi
            
            # 5. Verificar porta 80 dispon√≠vel
            echo -e "\n--- [5] Porta 80 ---"
            if sudo lsof -i :80 &> /dev/null; then
              echo "‚ö† Porta 80 j√° est√° em uso (container antigo ser√° removido)"
            else
              echo "‚úî Porta 80 dispon√≠vel"
            fi
            
            # 6. Mostrar IP p√∫blico
            echo -e "\n--- [6] IP P√∫blico ---"
            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            echo "IP: $PUBLIC_IP"
            
            echo -e "\n‚úÖ Troubleshooting conclu√≠do com sucesso!"
          EOF

      - name: Deploy to EC2
        run: |
          ssh -i bia.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.PUBLIC_IP }} << 'EOF'
            set -e

            echo "üîê Login no Amazon ECR..."
            aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 975050217683.dkr.ecr.us-east-1.amazonaws.com

            echo "üì• Baixando imagem do ECR..."
            sudo docker pull 975050217683.dkr.ecr.us-east-1.amazonaws.com/devops:v1.0.0

            echo "üßπ Removendo container antigo (se existir)..."
            sudo docker rm -f devops-app 2>/dev/null || true

            echo "üöÄ Subindo novo container..."
            sudo docker run -d \
              --name devops-app \
              --restart unless-stopped \
              -p 80:8080 \
              975050217683.dkr.ecr.us-east-1.amazonaws.com/devops:v1.0.0

            echo "‚úÖ Deploy conclu√≠do!"
            sudo docker ps
            
            echo -e "\nüåç Aplica√ß√£o dispon√≠vel em: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
          EOF

      - name: Verify Deployment
        run: |
          echo "üîç Verificando se a aplica√ß√£o est√° respondendo..."
          sleep 5
          ssh -i bia.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.PUBLIC_IP }} << 'EOF'
            if curl -s -o /dev/null -w "%{http_code}" http://localhost | grep -q "200"; then
              echo "‚úÖ Aplica√ß√£o respondendo corretamente na porta 80"
            else
              echo "‚ö† Aplica√ß√£o pode n√£o estar respondendo corretamente"
              sudo docker logs devops-app --tail 50
            fi
          EOF

      - name: Cleanup
        if: always()
        run: rm -f bia.pem